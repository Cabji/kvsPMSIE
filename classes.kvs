class("pmsimportexport::wgtmain","widget")
{
	function sqlFetchQuery()
	{
		%success = $false
		%strSQLQuery = $0
		
		if (%strSQLQuery != "")
		{
			// check we have a destination filename and that we can create it
			%success = @%sqlID->$queryExec(%strSQLQuery)
			@%sqlID->$queryFirst()
		}
		else
		{
			// did not get a sql quey string passed to the function
		}
		
		return %success
	}
	
	function sqlConnect()
	{
		// $0 = filename of sqlite database
		
		%strSQLFile = $0
		%success = $false
		
		if (%strSQLFile != "")
		{
			// create sql object
			@%sqlID = $new(sql, $$, "wgtMain|sqlID")
			// connect to database file
			%success = @%sqlID->$setConnection(%strSQLFile, "pmsdb")
		}
		else
		{
			if (@%debug == $true) {debug -c "SQL Filename or DB table name was not passed to function. Check data.";}
		}
		
		return %success
	}
	
	function importSQLResults()
	{
		%success = $false
		%inFile = @%leSourceFile->$text()
		
		if (%inFile != $null)
		{
			if ($file.exists(%inFile) == $true)
			{
				// dev-note: i use an array for the column names because when we get the results from the 
				// database they come back in some random order. using an array lets us specify the 
				// order of the columns. to alter the column names, edit the CSV string in the 
				// wgtMain::constructor
				%arrColNames = $str.split(",",@%o{strColNames})
				%intTotal	= 0
				%intGood	= 0
				%intFailed	= 0
				%intBlank	= 0
				%strGood = ""
				%strFailed = ""
				%fileID = $new(file)
				%fileID->$setName(%inFile)
				%fileID->$open("ReadOnly")
		
				@%lblStatus->$setText("Importing to database...")
				do {
					%intTotal++
					%line = %fileID->$readLine()
					if (%line != "\n" && %line != "")
					{
						if (@%sqlID->$queryExec(%line))
						{
							%intGood++;
							%strGood = %line
						}
						else 
						{
							%intFailed++;
							%strFailed = %line
						}
					}
					else {%intBlank++;}
				}
				while (%fileID->$atEnd() == $false)
		//		debug "--- Stats ---\n	Total lines: %intTotal\n	Blank lines: %intBlank\n	Good: %intGood\n	Failed: %intFailed";
		//		debug Good: %strGood\nFailed: %strFailed
				%fileID->$close()
				@%lblStatus->$setText("")
				dialog.message -b ("Finished", "Import completed.<br/><br/>%intGood entries inserted.<br/>%intFailed entries failed.<br/>%intBlank blank lines in file.", 43);
				%success = $true
			}
			else
			{
				// dest file does not exist
				dialog.message -b ("Failure", "Source file does not exist.<br/>Check file and try again.", 44) {}
			}
		}
		else
		{
			// dest file string was empty
			dialog.message -b ("Failure", "No source file is configured.<br/>Check settings and try again.", 44) {}
		}
		
		return %success
	}
	
	function exportSQLResults()
	{
		%outFile = @%leDestFile->$text()
		
		if (%outFile != $null)
		{
			// wipe existing file if it exists, otherwise creates it
			file.write %outFile "\n"
			if ($file.exists(%outFile) == $true)
			{
				// dev-note: i use an array for the column names because when we get the results from the 
				// database they come back in some random order. using an array lets us specify the 
				// order of the columns. to alter the column names, edit the CSV string in the 
				// wgtMain::constructor
				%arrColNames = $str.split(",",@%o{strColNames})
				%intCount = 0
				@%lblStatus->$setText("Exporting from database...")
				do {
					%row = @%sqlID->$queryRecord()
					%o .= "INSERT INTO @%o{strPMSTableName} VALUES("
					foreach (%col, %arrColNames)
					{
						if ($isNumeric(%row{%col})) {%o .= %row{%col},;}
						if ($isNumeric(%row{%col}) == $false && %row{%col} != "") {%o .= '%row{%col}',;}
						if ($isNumeric(%row{%col}) == $false && %row{%col} == "") {%o .= NULL,;}
					}
					%o = $str.chop(%o,1)
					%o .= ");\n"
					file.write -a %outFile %o
					%o = ""
					%intCount++
				}
				while (@%sqlID->$queryNext())
				@%lblStatus->$setText("")
				dialog.message -b ("Finished", "Export completed.<br/><br/>%intCount records exported.", 43);
			}
			else
			{
				// dest file does not exist
				dialog.message -b ("Failure", "Destination file is not configured.<br/>Check file and try again.", 44) {}
			}
		}
		else
		{
			// dest file string was empty
			dialog.message -b ("Failure", "No destination file was found.<br/>Check settings and try again.", 44) {}
		}
	}
	
	function declareSignalsAndSlots(this function is where all the signal and slot connections are declared for this object)
	{
		objects.connect @%btnSourceFile	clicked $$ buttonClickedHandler
		objects.connect @%btnDestFile	clicked $$ buttonClickedHandler
		objects.connect @%btnActionLaunch clicked $$ buttonClickedHandler
	}
	
	function constructor()
	{
		@$setWindowTitle("Plex Media Server Utility")
		@$setGeometry(0,0,400,150)
		@$centerToScreen()
		
		// class members
		@%o{strPMSTableName} = "metadata_item_settings"
		@%o{strColNames} = "id,account_id,guid,rating,view_offset,view_count,last_viewed_at,created_at,updated_at,skip_count,last_skipped_at,changed_at,extra_data,last_rated_at"
		
		// layout
		@%l0 = $new(layout, $$)
		
		// child widgets
		@%lblTitle = $new(label, $$)
		@%lblTitle->$setText("<b>Plex Media Server Metadata Import/Export Utility</b><hr width=100%/>")
		@%lblTitle->$setAlignment("Top","HCenter")
		
		@%lblSourceFile = $new(label, $$)
		@%lblSourceFile->$setText("Source File: ")
		@%leSourceFile = $new(lineedit, $$)
		@%leSourceFile->$frame($true)
		@%btnSourceFile = $new(button, $$, "wgtMain|btnSourceFile")
		@%btnSourceFile->$setText("Browse...")
		@%lblSourceFileSep = $new(label, $$)
		@%lblSourceFileSep->$setText("<hr width=100%/>")
		@%lblSourceFileSep->$setAlignment("Top")
		
		@%lblDestFile = $new(label, $$)
		@%lblDestFile->$setText("Destination File: ")
		@%leDestFile = $new(lineedit, $$)
		@%leDestFile->$frame($true)
		@%btnDestFile = $new(button, $$, "wgtMain|btnDestFile")
		@%btnDestFile->$setText("Browse...")
		@%lblDestFileSep = $new(label, $$)
		@%lblDestFileSep->$setText("<hr width=100%/>")
		@%lblDestFileSep->$setAlignment("Top")
		
		@%coboAction = $new(combobox, $$, "wgtMain|coboAction")
		@%coboAction->$insertItem("Export from Source to Destination")
		@%coboAction->$insertItem("Import from Source to Destination")
		@%btnActionLaunch = $new(button, $$, "wgtMain|btnActionLaunch")
		@%btnActionLaunch->$setText("LAUNCH")
		
		@%lblStatus = $new(label, $$, "wgtMain|lblStatus")
		@%lblStatus->$setAlignment(Bottom, Left)
		
		// apply child widgets to layout
		@%l0->$addMultiCellWidget(@%lblTitle,			0,0,0,2)
		@%l0->$addMultiCellWidget(@%lblSourceFile,		1,1,0,0)
		@%l0->$addMultiCellWidget(@%leSourceFile,			1,1,1,1)
		@%l0->$addMultiCellWidget(@%btnSourceFile,		1,1,2,2)
		@%l0->$addMultiCellWidget(@%lblSourceFileSep,		2,2,0,2)
		@%l0->$addMultiCellWidget(@%lblDestFile,			3,3,0,0)
		@%l0->$addMultiCellWidget(@%leDestFile,			3,3,1,1)
		@%l0->$addMultiCellWidget(@%btnDestFile,			3,3,2,2)
		@%l0->$addMultiCellWidget(@%lblDestFileSep,		4,4,0,2)
		@%l0->$addMultiCellWidget(@%coboAction,			5,5,0,1)
		@%l0->$addMultiCellWidget(@%btnActionLaunch,		5,5,2,2)
		@%l0->$addMultiCellWidget(@%lblStatus,			6,6,0,2)
		
		@%l0->$setRowStretch(0,1)
		@%l0->$setRowStretch(1,2)
		@%l0->$setRowStretch(2,1)
		@%l0->$setRowStretch(3,1)
		@%l0->$setRowStretch(4,1)
		@%l0->$setRowStretch(5,1)
		
		// declare signals and slots
		@$declareSignalsAndSlots()
	}
	
	function buttonClickedHandler(this function handles button clicks for this object and its children)
	{
		%success = $false
		%strSignalSenderName = @$signalSender->$name()
		
		if (%strSignalSenderName != $null)
		{
			switch (%strSignalSenderName)
			{
				case ("wgtMain|btnActionLaunch"):
				{
					// action button has been clicked - check which action
					%action = @%coboAction->$current()
					switch (%action)
					{
						case ("Export from Source to Destination"):
						{
							// make connection to sqlite database file as the SOURCE
							if (@$sqlConnect(@%leSourceFile->$text()))
							{
								if (@$sqlFetchQuery("SELECT @%o{strColNames} FROM @%o{strPMSTableName}"))
								{
									@$exportSQLResults()
								}
								@%sqlID->$closeConnection("pmsdb")
							}
							else
							{
								// database connect failed - output some message to user
								debug -c "database connection failed!\n	source filename: @%leSourceFile->$text()\n	table name: @%o{strPMSTableName}";
								dialog.message -b ("Failure", "Could not make database connection to source file: @%leSourceFile->$text()<br/>Check file and try again.", 44) {}
							}
						break;
						} // end case
						case ("Import from Source to Destination"):
						{
							// make connection to sqlite datasebase file as the DESTINATION
							if (@$sqlConnect(@%leDestFile->$text()))
							{
								@$importSQLResults()
								@%sqlID->$closeConnection("pmsdb")
							}
							else
							{
								// database connect failed - output some message to user
								debug -c "database connection failed!\n	dest filename: @%leSDestFile->$text()\n	table name: @%o{strPMSTableName}";
								dialog.message -b ("Failure", "Could not make database connection to destination file: @%leDestFile->$text()<br/>Check file and try again.", 44) {}
							}
							break;
						}
					} // end switch
					break;
				} // end case
				case ("wgtMain|btnSourceFile"):
				{
					dialog.file ("Open", "Select Source File", "com.plexapp.plugins.library.db", "Plex Database File (*.plugins.library.db*);;Any File (*.*)", $$)
					{
						// dialog callback
						// $0 contains the path & filename the user selected
						// $1 contains the wgtMain object, passed via magic parameter
						%fileSource	= $0
						%objParent	= $1
		
						if (%fileSource != $null && %objParent->$className() == "pmsimportexport::wgtMain")
						{
							// we have the filename and the wgtMain object in objParent
							%objParent->%leSourceFile->$setText(%fileSource)
						}
						else
						{
							// user probably cancelled
						}
						
					} // end dialog callback
					%success = $true;
					break;
				}// end case
				case ("wgtMain|btnDestFile"):
				{
					dialog.file ("Save", "Select Destination File", "com.plexapp.plugins.library.db", "Plex Database File (*.plugins.library.db*);;Any File (*.*)", $$)
					{
						// dialog callback
						// $0 contains the path & filename the user selected
						// $1 contains the wgtMain object, passed via magic parameter
						%fileDest	= $0
						%objParent	= $1
		
						if (%fileDest != $null && %objParent->$className() == "pmsimportexport::wgtMain")
						{
							if ($file.exists(%fileDest))
							{
								dialog.message -b ("Warning", "%fileDest already exists.<br/>If you <b>EXPORT</b> to this file, the contents will be overwritten!<br/>This is your last warning.", 318, "OK") {}
							}
							else
							{
								// create the file as it doesn't exist?
							}
							// we have the filename and the wgtMain object in objParent
							%objParent->%leDestFile->$setText(%fileDest)
						}
						else
						{
							// user probably cancelled
						}
						
					}
					%success = $true;
					break;
				}
				default:
				{
					debug -c "A button was pressed, but we don't know which one it was. Look at pmsimportexport::wgtMain::buttonClickedHandler -> switch -> case entries to support this button.";
				}
			}
		
		}
		else
		{
			if (@%debug == $true) {debug -c "The Signal Sender Name could not be obtained.";}
		}
		
		return %success
	}
	
}

class("pmsimportexport::main","object")
{
	function showChild($0 - name of child widget to display)
	{
		%success = $false
		if ($0 != "") {%strChildName = $0;}
		if ($1 != "") {%strChildClass = $1;}
		
		if (%strChildName != $null)
		{
			// check if child widget name exists
			%objChild = @$findChild(%strChildClass,%strChildName)
			if ($typeOf(%objChild) == "hobject")
			{
				%objChild->$show()
				%success = $true
			}
			else
			{
				if (@%debug == $true) {debug -c Object found by $findChild was not type hobject;}
			}
		}
		else
		{
			if (@%debug == $true) {debug -c No widget name was passed in first argument;}
		}
		
		return %success
	}
	
	function constructor()
	{
		/* Plex Media Server metadata settings import/export tool
		
			Author: cabji
			Date: 20200603
		
			This script provides a GUI to easily export metadata from your Plex Media Server database file. 
			It is useful if or when you need to reinstall your PMS, or you create a new PMS and want to retain 
			or restore the metadata of your media. Metadata here means the "watch data" for the media items, 
			so that the PMS knows where to resume watching if you stopped an item midway through viewing, 
			or if you have watched or not watched a movie or tv episode etc.
		
			This utility makes it easier to do the process described at: 
			https://support.plex.tv/articles/201154527-move-viewstate-ratings-from-one-install-to-another/
			especially for Windows users. It offers a point and click approach.
		
			I tried to add some nice progress bars when the utility does the import and export of the data, 
			but for some reason the widgets don't update correctly in realtime and I couldn't work out how 
			to fix it. If you click the LAUNCH button and it seems to be doing nothing or KVIrc goes into 
			"Not Responding" just wait it out and a dialog will tell you when the process is finished.
		
			To run this script, in KVIrc press Ctrl + Shift + X, select the classes.kvs file.
			Then press Ctrl + Shift + S to open script tester and tpye in: 
			
				%kvsApp = $new(pmsimportexport::main)
		
			Then press the Execute button.
		*/
		
		// class members
		@%debug = $true
		
		// child widgets
		@%wgtMain = $new("pmsimportexport::wgtMain", $$, "PMSIE Main")
		
		@$showChild("PMSIE Main")
	}
	
}

